
    DESIGN SIMPLE

This code base is designed in order to minimize and isolate the vscode environment specifics from the core logic. 

This makes testing much easier, but also reuse (for things line a command line formatter for txxt). 

    1. Logic isolation

    Everything that is business rules, logic related (that is , is not bound to a particular ui / enviroment) should be isolated, preferably with pure functions under src/features src/models and others.

    This is the place where the bulk of the functionality resides and should be by far the largest part of the code. 

    
    2. environment Wrappers

    To make this isolated code be used in a structured way by the various environments we expose in api in src/core/backends/api.ts that give you access to those, regardless of the runtime. 

    2.1 BACKENDS

hence apis have backends, that is a piece of code that can execute ops in a particular environment.  there are two main environments: 

    2.1.1 HEADLESS

    Doesn't need vscode or any ui, can run as a process. this is the core backend and all business logic should be captured by it. 

    2.2.w VSCODE
    
    Requires the vscode environment (where users install the extension for integration testing. the goal is to have this be a thin layer, so that integration tests are few and simple.

    2.3 LAYOUT

        /src/core/backends/<backend-name>/index.ts -> entry point for backend
        /src/core/backends/<backend-name>/<feature>.ts -> features in ts files

    in similar fashion unit tests layout should be: 
        
        /tests/unit/backends/<backend-name>/