# Implementation Plan

This document outlines the implementation strategy for the txxt format, focusing on leveraging VSCode's infrastructure and TextMate grammars.

## 1. Architecture Overview

The implementation will leverage VSCode's built-in infrastructure to minimize manual parsing work:

1. **TextMate Grammar Layer** (Primary Parser)
   - Handles syntax recognition
   - Provides tokenization
   - Gives scoped ranges
   - Handles basic syntax highlighting

2. **VSCode Language Server Layer**
   - Interprets pre-tokenized document
   - Provides language features
   - Handles document changes

## 2. Project Structure

```
src/core/txxt-syntax/v1/
├── grammar/
│   └── txxt.tmLanguage.json    # Main parsing rules
├── language-server/
│   ├── server.ts              # Interprets grammar results
│   └── types.ts              # Shared types
├── dialect/
│   └── rules.json           # Dialect-specific variations
└── formatter/
    └── index.ts            # Uses grammar scopes for formatting

tests/unit/txxt-syntax/v1/
├── fixtures/
│   ├── blocks/                # Block isolation tests
│   │   ├── basic.input.txxt
│   │   └── basic.output.json  # Expected parse tree
│   ├── titles/               # Title element tests
│   │   ├── simple.input.part.txxt
│   │   ├── simple.output.json
│   │   ├── numbered.input.part.txxt
│   │   └── numbered.output.json
│   ├── paragraphs/           # Paragraph element tests
│   │   ├── basic.input.part.txxt
│   │   └── basic.output.json
│   └── documents/            # Full document tests
│       ├── minimal.input.txxt
│       ├── minimal.output.txxt
│       └── minimal.ast.json   # Expected AST
├── grammar/
│   ├── txxt.tmLanguage.test.ts
│   └── v-template.test.ts    # Template for new grammar tests
├── language-server/
│   └── server.test.ts
└── formatter/
    └── index.test.ts
```

## 3. Implementation Strategy

### 3.1 TextMate Grammar Integration

The grammar will handle most of the parsing work. We use the `vscode-textmate` package for grammar parsing:

```typescript
import * as vscodeTextmate from 'vscode-textmate';
import * as oniguruma from 'oniguruma';

// Initialize the registry with oniguruma for regex support
const registry = new vscodeTextmate.Registry({
    onigLib: oniguruma.loadWASM()
});

// Load the grammar
const grammar = await registry.loadGrammar('text.txxt');

// Tokenize a line
const lineTokens = grammar.tokenizeLine('1. Title');
```

Key points for grammar integration:
1. Install dependencies:
   ```bash
   npm install vscode-textmate oniguruma
   npm install --save-dev @types/vscode-textmate
   ```

2. Grammar file structure:
   ```json
   {
     "scopeName": "text.txxt",
     "patterns": [
       {
         "name": "meta.block.title.txxt",
         "match": "^(\\d+\\.)+\\s+(.*)$",
         "captures": {
           "1": { "name": "markup.heading.sequence.txxt" },
           "2": { "name": "markup.heading.content.txxt" }
         }
       }
       // ... more patterns
     ]
   }
   ```

3. Testing:
   - Use the template at `tests/unit/txxt-syntax/v1/grammar/v-template.test.ts`
   - Create fixtures in the appropriate directory under `tests/unit/txxt-syntax/v1/fixtures/`
   - Run tests with `npm test` or `npm test tests/unit/txxt-syntax/v1/grammar/your-test-file.test.ts`

### 3.2 Language Server

Instead of manual parsing, we'll interpret the pre-tokenized document:

```typescript
class DocumentHandler {
  interpret(tokens: vscode.Token[]): Block[] {
    // Just interpret pre-parsed tokens
    return tokens.map(token => {
      if (token.scope.includes('markup.heading')) {
        return this.createTitleBlock(token);
      }
      // etc...
    });
  }
}
```

## 4. Development Order

1. **Grammar Development**
   - Create basic TextMate grammar
   - Test with simple documents using the test template
   - Add support for all element types

2. **Language Server Setup**
   - Set up basic server
   - Implement token interpretation
   - Add document change handling

3. **Dialect Support**
   - Define dialect rules
   - Implement variation detection
   - Add canonical form conversion

4. **Formatting**
   - Implement formatter using grammar scopes
   - Add formatting rules
   - Test with various inputs

5. **Testing**
   - Create test fixtures
   - Implement unit tests using the template
   - Add integration tests

## 5. Benefits of This Approach

1. **Reduced Code**
   - Leverages VSCode's parsing infrastructure
   - Minimizes manual parsing code
   - Reuses battle-tested components

2. **Better Integration**
   - Native syntax highlighting
   - Efficient incremental updates
   - Better performance

3. **Easier Maintenance**
   - Clear separation of concerns
   - Standard VSCode patterns
   - Well-documented infrastructure

## 6. Version Management

Each version will have its own:
- Grammar file
- Language server implementation
- Test suite
- Documentation

This allows for:
- Easy comparison between versions
- Independent testing
- Clear migration paths

## 7. Troubleshooting

If you encounter issues with the TextMate grammar implementation:

1. Check the test template at `tests/unit/txxt-syntax/v1/grammar/v-template.test.ts` for proper setup
2. Verify grammar file structure matches the example in section 3.1
3. Ensure all dependencies are installed correctly
4. Run `npm run compile` before running tests
5. Check the test output for specific tokenization issues

For more detailed examples and test cases, refer to:
- Test template: `tests/unit/txxt-syntax/v1/grammar/v-template.test.ts`
- Working example: `tests/unit/txxt-syntax/v1/grammar/txxt.tmLanguage.test.ts` 